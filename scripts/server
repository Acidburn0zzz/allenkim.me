#!/bin/env node
var env = process.env.NODE_ENV || 'development';
var config = require('../config/config.js');
var express = require('express');
var server = express();
var bodyParser = require('body-parser');
var fs = require('fs');
var morgan = require('morgan');
var cookieParser = require('cookie-parser')

//require("../config/config-mongoose.js").init();

/**
 * Web server Configuration
 */
server.use(cookieParser());
server.use(morgan('dev')); //combined, common, dev or short
server.use(bodyParser({limit: '1mb'}));
server.use(require('method-override')());
server.use('/favicon.ico', express.static(config.baseDir + "/views"));
server.use('/static', express.static(config.baseDir + "/views"));

/**
 * Request Handlers
 */
var auth = require(config.baseDir + "/models/auth.js"); 
var appCtrl = require(config.baseDir + "/controllers/applications-controller.js");

server.get('/', appCtrl({controller:'articles', action: 'list'}));
server.get('/login', appCtrl({controller:'sessions', action:'create'}));
server.post('/login', appCtrl({controller:'sessions'}));

server.get('/:controller.:format?', appCtrl());     // list
server.get('/:controller/create', auth.hasRole('admin'), appCtrl({action:'create'}));      // GET: create
server.get('/:controller/:id.:format?', appCtrl()); // show
server.get('/:controller/:id/:action', auth.hasRole('admin'), appCtrl()); //GET: update, delete
server.post('/:controller', auth.hasRole('admin'), appCtrl());            //POST: create
server.put('/:controller/:id', auth.hasRole('admin'), appCtrl());         //PUT: update
server.delete('/:controller/:id', auth.hasRole('admin'), appCtrl());      //DELETE: delete

/**
 * Start The Server
 */
var port = process.env.PORT || 3000;
server.listen(port);
console.log('Express server listening on port ' + port );
